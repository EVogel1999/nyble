[{"content":"Introduction\u003e Introduction # Solana is another very popular blockchain that is drastically different from EVM-based blockchains. Instead of Proof of Stake, Solana uses Proof of History. This has made Solana, in comparison with Ethereum, faster and have lower gas fees. Additionally, Solana has a dedicated team working on NFT related programs called Metaplex. This team has created many different tools such as CLIs, customizable storefronts, and no-code solutions.\nSolana has become integral to the NFT community and innovation, therefore it\u0026rsquo;s important to learn how to work with Solana smart contract programs. A simple way to start is retrieving all the NFTs (minted or not) from a specific Candy Machine V2 address. Candy Machine is a type of program that operates similarly to a gumball machine. When people buy an NFT from the machine, it mints them a random NFT from the collection instead of a specific one.\nTechnology Requirements\u003e Technology Requirements # To follow along with this post you need the following installed on your machine:\nNode.js Visual Studio Code Prerequisites\u003e Prerequisites # To fully follow along with this post it\u0026rsquo;s assumed that you know how to work with node.js and javascript. Also, you will need to understand some key javascript concepts like async/await.\nHere are some resources if you need to learn these concepts:\nNet Ninja: Node.js Crash Course Tutorial Net Ninja: Asynchronous Javascript Tutorial Project Setup\u003e Project Setup # To setup the project, create a new directory that we will be working in. After that, init a new node project using the following command:\nnpm init -y You will also need to install the @solana/web3.js dependency in order to work with the Candy Machine:\nnpm i @solana/web3.js For the sake of simplicity, we\u0026rsquo;ll be coding everything in one javascript function. So the following setup will be used:\nasync function main() { // TODO: Write code } main(); Creating a Blockchain Connection\u003e Creating a Blockchain Connection # It\u0026rsquo;s rather easy to connect to the Solana blockchain. The @solana/web3.js package handles this part almost entirely by itself. To connect to the Solana mainnet, you code the following in javascript:\nimport { Connection, clusterApiUrl } from \u0026#39;@solana/web3.js\u0026#39;; async function main() { const connection = new Connection(clusterApiUrl(\u0026#39;mainnet-beta\u0026#39;)); } This connection is used to interact with the Solana blockchain. In order to write data to the chain you will need your own public and private key; however, for reading data from the chain, you don\u0026rsquo;t need your own key.\nGetting the Account Info\u003e Getting the Account Info # Getting a specific key\u0026rsquo;s information requires knowing the public key of a Candy Machine. For this post, lets use the public key 9tQLFyLeaUwQ1PN2YDiFztZDxu4KT6px8CBYEapkshAD. Any specific Candy Machine V2 address will work though, not just this address.\nTo get started, we need to get the Account Info from the Candy Machine. Depending on the program type, this account information can look different and hold different values. The code for getting the Account Info is as follows:\nimport { Connection, clusterApiUrl, PublicKey } from \u0026#39;@solana/web3.js\u0026#39;; async function main() { // Generate public key const key = new PublicKey(\u0026#34;9tQLFyLeaUwQ1PN2YDiFztZDxu4KT6px8CBYEapkshAD\u0026#34;); // Get account info with key const info = await connection.getAccountInfo(key); } We have to ensure that the string public key conforms to the cryptographic public key that is an acceptable parameter when getting the Account Info for the key. From this info, we can get some basic information about the account such as it\u0026rsquo;s Owner and Lamports (a lamport is a fraction of a SOL, the cryptocurrency used to pay gas fees). You can also pass this information to other Metaplex or Solana packages to get more information out of them (such as the CandyMachine class from @metaplex-foundation/mpl-candy-machine).\nParsing the Data Buffer\u003e Parsing the Data Buffer # The information that we need about the NFTs are located in info.data. However, there is one small problem that we need to work through first: data is a very long buffer that we need to parse through. Thankfully, the information is chunked in such a way that it\u0026rsquo;s easy to parse through and get specific information about the Candy Machine.\nEach NFT has a 4 byte separator, name length of 32 bytes, followed by another 4 byte separator, then followed by 200 bytes for the URL of the metadata. The NFT metadata starts at byte 717. So to get the first NFT from the buffer, the code would look like the following:\nasync function main() { info.data.slice(717, 717 + 4 + 32 + 4 + 200); } In order to get just the first URL of the NFT, it\u0026rsquo;d look like the following:\nasync function main() { let url = info.data.slice(717 + 4 + 32 + 4, 717 + 4 + 32 + 4 + 200).toString(); url = url.substring(0, url.indexOf(\u0026#39;\\x00\u0026#39;)); } The code for getting just the URL looks a little different because we are cleaning up the URL string to remove the empty buffer values of \\x00.\nFrom this, you can abstract out the code so it loops to the end of the buffer to get all the NFT URLs in the Candy Machine. You can also setup pagination so you can only show 5 NFTs per page to speed up performance. To get the NFT metadata programmatically, all you will need to do is make a network request using Fetch or Axios.\nConclusion\u003e Conclusion # In conclusion, Solana is a very popular blockchain for NFTs because of its low gas fees and official programs dedicated to innovating and working with the NFT protocol. A simple way to get started working with Solana is by working with the @solana/web3.js dependency to view the NFTs of a Candy Machine V2 address. Candy Machine is a type of program maintained by Metaplex.\nAdditionally, there are other packages that are maintained by Metaplex that will do similar things to this post such as their new Javascript SDK. However, the point of this post was to work closer with the protocols, programs, and packages rather then it be abstracted out by the SDK which is why it was avoided in this post.\nFull Code\u003e Full Code # import { Connection, clusterApiUrl, PublicKey } from \u0026#39;@solana/web3.js\u0026#39;; async function main() { const connection = new Connection(clusterApiUrl(\u0026#39;mainnet-beta\u0026#39;)); // Generate public key const key = new PublicKey(\u0026#34;9tQLFyLeaUwQ1PN2YDiFztZDxu4KT6px8CBYEapkshAD\u0026#34;); // Get account info with key const info = await connection.getAccountInfo(key); info.data.slice(717, 717 + 4 + 32 + 4 + 200); let url = info.data.slice(717 + 4 + 32 + 4, 717 + 4 + 32 + 4 + 200).toString(); url = url.substring(0, url.indexOf(\u0026#39;\\x00\u0026#39;)); } main(); ","date":"29 October 2022","permalink":"/posts/getting-candy-machine-nfts/","section":"Posts","summary":"Solana is a very popular blockchain that is a lot more efficient that Ethereum.  The lower gas fees and higher transaction throughput made it ideal for NFTs and innovations surrounding them.  In this post, we\u0026rsquo;ll learn how to programmatically retrieve NFT data using node and @solana/web3.js.","title":"How to Programmatically get Candy Machine NFTs"},{"content":"","date":"29 October 2022","permalink":"/tags/javascript/","section":"Tags","summary":"","title":"javascript"},{"content":"","date":"29 October 2022","permalink":"/","section":"Nyble","summary":"","title":"Nyble"},{"content":"","date":"29 October 2022","permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":"29 October 2022","permalink":"/tags/solana/","section":"Tags","summary":"","title":"solana"},{"content":"","date":"29 October 2022","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":"15 August 2022","permalink":"/tags/ethereum/","section":"Tags","summary":"","title":"ethereum"},{"content":"Introduction\u003e Introduction # Blockchain technology is a new emerging technology revolutionizing many different industries including finance (DeFi), governance (DAOs), art (NFTs), and more. There are a few languages that are popular for coding projects on the blockchain, solidity is used for EVM-based (ethereum virtual machine) blockchains.\nOne of the best ways to learn is by doing so in this tutorial we will focus on introducing the key concepts and fundamentals of solidity blockchain development with hardhat.\nAll the code (with comments) can be found at this GitHub repository.\nTechnology Requirements\u003e Technology Requirements # To run this tutorial you need the following installed on your machine:\nNode.js Visual Studio Code Prerequisites\u003e Prerequisites # To fully follow along with this tutorial it\u0026rsquo;s assumed that you know how to work with node.js and javascript. Also, you will need to understand some key javascript concepts like async/await.\nHere are some resources if you need to learn these concepts:\nNet Ninja: Node.js Crash Course Tutorial Net Ninja: Asynchronous Javascript Tutorial Project Setup\u003e Project Setup # To write solidity, we will be using the hardhat development environment. This environment contains everything that is needed to develop, test, and deploy solidity smart contracts.\nTo create a new hardhat project, first we need to initialize a folder using npm:\nnpm init -y After that, we need to install a few dependencies and then the hardhat package will take care of the rest of the setup:\nnpm install chai ethereum-waffle ethers @nomiclabs/hardhat-ethers @nomiclabs/hardhat-waffle @nomicfoundation/hardhat-toolbox npx hardhat If you are prompted to choose a between javascript or typescript, choose javascript. Select the option for setting up a empty hardhat project, you can use the other options too if you want to see a boilerplate example of a hardhat project.\nDeveloping the Smart Contract\u003e Developing the Smart Contract # The smart contract that we will be developing is influenced by the genre of cyberpunk. What we will be coding is a simple Job smart contract that will do the following:\nAllow the job\u0026rsquo;s client to deposit ETH into the contract Allow a team of people to accept the job Allow the client to mark the job as finished Auto pay the team who accepted the job Create a new Job.sol file in the contracts folder and copy the following code into the file:\n// SPDX-License-Identifier: Unlicense pragma solidity ^0.8.0; contract Job { // TODO: Write code } To create an empty smart contract, you need the following:\nA software license identifier (for now, leave it unlicensed) The version of solidity you want to run The contract name Registering the Client and Depositing ETH\u003e Registering the Client and Depositing ETH # Before the client can deposit ETH into the smart contract, we first need to register who the client is. To do that, we set a client variable in the constructor.\n// Enums enum JobState { WAITING, ACCEPTED, COMPLETED } // Job information address private client; JobState private state = JobState.WAITING; constructor() { // Sends the job client to the deployer client = msg.sender; } msg is a global variable that can be accessed in any function or modifier. The sender attribute is the address (a wallet or contract address) that last called the contract. In this particular case, the person who deploys the smart contract is the msg.sender.\nNow that we know who the job\u0026rsquo;s client is, we can write the deposit() function.\n// Contract events event PaymentReceived(address from, uint256 amount); /** * Deposits ether to the contract */ function deposit() payable public isClient { // Emit an event saying the contract received the deposit emit PaymentReceived(msg.sender, msg.value); } /** * Check that the client isn\u0026#39;t making the transaction */ modifier notClient() { require(tx.origin != client, \u0026#34;Client can\u0026#39;t perform action\u0026#34;); _; } /** * Check that the client is making the transaction */ modifier isClient() { require(tx.origin == client, \u0026#34;Only client can perform action\u0026#34;); _; } To be able to deposit ETH into a contract the function has to be of type payable. This is a modifier (similar to public/private visibility modifiers in other languages) that allows the function to accept token payments. We emit an event when the client deposits ETH in order to acknowledge the deposit (we don\u0026rsquo;t need to emit an event for this but it\u0026rsquo;s good practice).\nTo make sure that only the client is depositing ETH to the contract, we need to create modifiers. The two that are created above are notClient and isClient; what these two functions do is check that the person calling a particular function (such as deposit()) is the client we defined earlier.\nLike msg, tx is another global variable; origin is an attribute on tx that is similar to the msg.sender attribute. The difference between msg.sender and tx.origin is who the \u0026ldquo;origin\u0026rdquo; wallet address that called the function. To better visualize this, a table below is provided. In the first scenario, contract A would register msg.sender and tx.origin as the same. However, in the second scenario contract B would register them as different.\nContract Call msg.sender tx.origin Wallet -\u0026gt; A Wallet Wallet Wallet -\u0026gt; A -\u0026gt; B A Wallet /** * Returns the total payout for the job */ function getPayout() public view returns (uint256) { return address(this).balance; } Last but not least we also need to provide a way to easily get the total payout for the job. This isn\u0026rsquo;t strictly necessary as you can do this with frontend javascript libraries but contains another modifier we haven\u0026rsquo;t come across yet. The view modifier is a modifier that allows the address to read a value from the blockchain gas-free.\nIn blockchain applications, every transaction onto the chain costs ETH (or the blockchain\u0026rsquo;s native token). So when you declare something as view or pure then that particular action isn\u0026rsquo;t changing the chain\u0026rsquo;s state, only reading from it and doesn\u0026rsquo;t count as a transaction.\nAccepting a Job\u003e Accepting a Job # Now that the client can deposit ETH for the job into the smart contract, we need to write the functionality for a group of people to accept the job. We need to include the ability to record the whole percentages of the cut for each team member.\n// Team information address[] private members; uint8[] private shares; /** * Accepts a job with a given team array and the shares for each team member */ function acceptJob(address[] memory m, uint8[] memory s) external notClient { // Check members and shares are defined and same length require(m.length == s.length, \u0026#34;Team members and shares must be same length\u0026#34;); require(m.length \u0026gt; 0, \u0026#34;Team must have at least one member\u0026#34;); require (state == JobState.WAITING, \u0026#34;Job must be awaiting team\u0026#34;); // Check the total shares is equal to 100 (100%) uint8 total = 0; for (uint i = 0; i \u0026lt; s.length; i++) { total += s[i]; } require (total == 100, \u0026#34;Shares must total to 100\u0026#34;); // Set team members members = m; shares = s; // Set contract state to accepted state = JobState.ACCEPTED; } The first three require statements check that the team members and shares match in length, that there is at least one member in the team, and that the job is waiting for someone to accept it.\nThe for loop checks that the shares array total to 100 (or 100%). If it passes those checks then the members and their shares are recorded and the job\u0026rsquo;s state moves to \u0026ldquo;accepted\u0026rdquo;, no other team can accept the job now.\nCompleting a Job\u003e Completing a Job # The only thing that\u0026rsquo;s left for this contract is for the client to complete and close out the job, automating the payments to each team member. To do the payments safely and securely, we will be using another contract from a company called Open Zeppelin. Open Zeppelin is a blockchain security company that offers a library of secure solidity contracts for the community to use.\nWe install these contracts through npm:\nnpm i @openzeppelin/contracts Then we import it using the import statement:\n//SPDX-License-Identifier: Unlicense pragma solidity ^0.8.0; import \u0026#34;@openzeppelin/contracts/utils/Address.sol\u0026#34;; contract Job { // ... } /** * Completes a job and sends out the payment to the team */ function complete() external isClient { require(state == JobState.ACCEPTED, \u0026#34;Job must be accepted to complete\u0026#34;); // Set job state state = JobState.COMPLETED; // Payout each team member uint256 totalPayout = this.getPayout(); for (uint i = 0; i \u0026lt; members.length; i++) { uint256 cut = (totalPayout * shares[i]) / 100; Address.sendValue(payable(members[i]), cut); } } The complete() function only needs to check that the job is in the accepted state so it can later be moved to completed. Then we iterate through each team member and automate payments to them using Open Zeppelin\u0026rsquo;s Address contract.\nWhat\u0026rsquo;s important to note here is that solidity doesn\u0026rsquo;t have decimals, so the cut needs to be a whole number. This is why the member\u0026rsquo;s share is multiplied by the total payout and divided by 100.\nCreating a Deploy and Test Script\u003e Creating a Deploy and Test Script # One of the great features about blockchain development environments like hardhat is they provide the setup needed to run and test on a local ethereum node on your computer. This means you don\u0026rsquo;t need to deploy to the testnet or mainnet in order to test out your smart contracts.\nDeploying the Contract\u003e Deploying the Contract # To create a simple deploy/test script, create a new run.js file in the scripts folder:\nasync main () =\u0026gt; { // TODO: Write code } main() In order to test the functions we have written, the first step is to deploy the contract to our local ethereum node. To do this, we use the ethers library installed earlier:\n// Init contract const [client, addr1, addr2] = await hre.ethers.getSigners(); const JobFactory = await hre.ethers.getContractFactory(\u0026#39;Job\u0026#39;); let jobContract = await JobFactory.deploy(); await jobContract.deployed(); console.log(\u0026#39;Contract deployed to:\u0026#39;, jobContract.address); When you start a node, 10 random wallets pre-loaded with test ETH are created onto the node. To test our contract, we want to save 3 of these. The first one in the array is always the default wallet that is connected to the node (hence why it\u0026rsquo;s named client).\nEthers does most of the work for us when deploying a smart contract. What we need to do first is get the Job factory, then we need to deploy it (using the provided ethers method). The last step we need to do is wait for the contract to be deployed. With blockchain, just because a transaction is added to the chain doesn\u0026rsquo;t mean that it was successful. The purpose of waiting for deployed is to ensure the transaction went through and that the contract is live on our local node.\nExecuting Functions from Javascript\u003e Executing Functions from Javascript # Now that the contract has been deployed to our local ethereum node, we can interact with it using the ethers library. To test this, lets deposit some ETH into the smart contract:\n// Constants const weth = 1000000000000000000; // Deposit ETH to the contract await jobContract.deposit({value: ethers.utils.parseEther(\u0026#39;1.3\u0026#39;)}); const payout = await jobContract.getPayout(); console.log(\u0026#39;Payout (ETH): \u0026#39;, payout / weth); If you recall while coding Job.sol, it was mentioned that solidity does not support decimals and the only way to work with fractions and decimals is to mimic the fraction using whole numbers. 1 ETH is equivalent to 1,000,000,000,000,000,000, anything less then this number is called WETH. We can manually parse the WETH returned using the getPayout() method or use an ethers library.\nTo deposit ETH into the contract programmatically, we need to pass a value as a javascript object in the WETH equivalent number. When the deposit() function is called, the amount of WETH will be automatically withdrawn from the client\u0026rsquo;s wallet.\n// Accept job jobContract = jobContract.connect(addr1); await jobContract.acceptJob([addr1.address, addr2.address], [75, 25]); To accept the job, we can pass in arrays to the acceptJob() function that represent the team and each member\u0026rsquo;s share. In the example above addr1 is receiving 75% of the total payout while addr2 is receiving 25%.\nIn order for this function to work, we need to simulate another wallet connecting and interacting with the contract (not just the client). To do that, we use an ethers function called connect().\n// Complete job, check address balances jobContract = jobContract.connect(client); let preBal = await addr1.getBalance(); console.log(\u0026#39;Pre-Job Value: \u0026#39;, preBal / weth); await jobContract.complete(); let postBal = await addr1.getBalance(); console.log(\u0026#39;Post-Job Value: \u0026#39;, postBal / weth); console.log(\u0026#39;Value Difference: \u0026#39;, (postBal - preBal) / weth); The last function we need to check is complete(). After we connect the client address back to the contract, we can call the complete() function. To see if the team members were adequately paid we check their wallet\u0026rsquo;s balances before and after completing the job.\nConclusion\u003e Conclusion # That\u0026rsquo;s it! In this tutorial we created a new hardhat project, smart contract, and deploy script. This covers most of the fundamentals of solidity development however there are more advanced concepts to learn that include but are not limited to the following:\nDesign patterns Unit testing Cybersecurity Frontend + smart contract integrations Thank you for reading and I hope this was helpful!\nFull Code\u003e Full Code # GitHub Repository\n// SPDX-License-Identifier: Unlicense pragma solidity ^0.8.0; import \u0026#34;@openzeppelin/contracts/utils/Address.sol\u0026#34;; contract Job { // Enums enum JobState { WAITING, ACCEPTED, COMPLETED } // Contract events event PaymentReceived(address from, uint256 amount); // Job information address private client; JobState private state = JobState.WAITING; // Team information address[] private members; uint8[] private shares; constructor() { // Sends the job client to the deployer client = msg.sender; } /** * Returns the total payout for the job */ function getPayout() public view returns (uint256) { return address(this).balance; } /** * Gets the current job state */ function getJobState() external view returns (string memory) { if (state == JobState.WAITING) { return \u0026#34;Waiting\u0026#34;; } else if (state == JobState.ACCEPTED) { return \u0026#34;Accepted\u0026#34;; } else { return \u0026#34;Completed\u0026#34;; } } /** * Deposits ether to the contract */ function deposit() payable public isClient { // Emit an event saying the contract received the deposit emit PaymentReceived(msg.sender, msg.value); } /** * Accepts a job with a given team array and the shares for each team member */ function acceptJob(address[] memory m, uint8[] memory s) external notClient { // Check members and shares are defined and same length require(m.length == s.length, \u0026#34;Team members and shares must be same length\u0026#34;); require(m.length \u0026gt; 0, \u0026#34;Team must have at least one member\u0026#34;); require (state == JobState.WAITING, \u0026#34;Job must be awaiting team\u0026#34;); // Check the total shares is equal to 100 (100%) uint8 total = 0; for (uint i = 0; i \u0026lt; s.length; i++) { total += s[i]; } require (total == 100, \u0026#34;Shares must total to 100\u0026#34;); // Set team members members = m; shares = s; // Set contract state to accepted state = JobState.ACCEPTED; } /** * Completes a job and sends out the payment to the team */ function complete() external isClient { require(state == JobState.ACCEPTED, \u0026#34;Job must be accepted to complete\u0026#34;); // Set job state state = JobState.COMPLETED; // Payout each team member uint256 totalPayout = this.getPayout(); for (uint i = 0; i \u0026lt; members.length; i++) { uint256 cut = (totalPayout * shares[i]) / 100; Address.sendValue(payable(members[i]), cut); } } /** * Check that the client isn\u0026#39;t making the transaction */ modifier notClient() { require(tx.origin != client, \u0026#34;Client can\u0026#39;t perform action\u0026#34;); _; } /** * Check that the client is making the transaction */ modifier isClient() { require(tx.origin == client, \u0026#34;Only client can perform action\u0026#34;); _; } } async main () =\u0026gt; { // Constants const weth = 1000000000000000000; // Init contract const [client, addr1, addr2] = await hre.ethers.getSigners(); const JobFactory = await hre.ethers.getContractFactory(\u0026#39;Job\u0026#39;); let jobContract = await JobFactory.deploy(); await jobContract.deployed(); console.log(\u0026#39;Contract deployed to:\u0026#39;, jobContract.address); console.log(); // Deposit ETH to the contract await jobContract.deposit({value: ethers.utils.parseEther(\u0026#39;1.3\u0026#39;)}); const payout = await jobContract.getPayout(); console.log(\u0026#39;Payout (ETH): \u0026#39;, payout / weth); console.log(); // Accept job jobContract = jobContract.connect(addr1); await jobContract.acceptJob([addr1.address, addr2.address], [75, 25]); const state = await jobContract.getJobState(); console.log(\u0026#39;Current Job State: \u0026#39;, state); console.log(); // Complete job, check address balances jobContract = jobContract.connect(client); let preBal = await addr1.getBalance(); console.log(\u0026#39;Pre-Job Value: \u0026#39;, preBal / weth); await jobContract.complete(); let postBal = await addr1.getBalance(); console.log(\u0026#39;Post-Job Value: \u0026#39;, postBal / weth); console.log(\u0026#39;Value Difference: \u0026#39;, (postBal - preBal) / weth); } main(); ","date":"15 August 2022","permalink":"/posts/intro-solidity/","section":"Posts","summary":"Solidity is a new and upcoming language that is used for EVM-based blockchain programming.  Learn some of the fundamentals behind the language by setting up a new hardhat project and coding a simple smart contract!","title":"Intro to Solidity"},{"content":"","date":"15 August 2022","permalink":"/tags/solidity/","section":"Tags","summary":"","title":"solidity"},{"content":"","date":"1 January 0001","permalink":"/authors/","section":"Authors","summary":"","title":"Authors"},{"content":"","date":"1 January 0001","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"1 January 0001","permalink":"/series/","section":"Series","summary":"","title":"Series"}]